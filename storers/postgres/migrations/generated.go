// Code generated by go-bindata.
// sources:
// sql/20161012_init.sql
// sql/20180619_1_unique_insert.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sql20161012_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\xcf\xbb\xaa\x83\x40\x10\x00\xd0\xda\xf9\x8a\x29\x95\xab\xd5\x0d\x36\x56\x1b\x5d\x88\xc4\x17\x9b\x31\x60\x1a\x59\x74\x12\x04\xa3\xe2\xae\xe4\xf7\xd3\x4a\x20\xa4\x3f\xcd\x09\x02\xfc\x7b\x0e\x8f\x55\x5b\xc6\x7a\x81\x58\x49\x41\x12\x49\x1c\x33\x89\xba\xeb\xe6\x6d\xb2\x06\x5d\x70\x86\x1e\xaf\x42\xc5\x27\xa1\xdc\xf0\xe0\x61\xa5\xd2\x5c\xa8\x06\xcf\xb2\xf1\xc1\x59\xd6\xf9\x3e\x8c\xdc\xee\xd0\x7f\xe8\x61\x51\x12\x16\x75\x96\xf9\xe0\x74\x2b\x6b\xcb\x7d\xab\x2d\x52\x9a\xcb\x0b\x89\xbc\xa2\xdb\x5e\x8c\xda\xd8\x76\x33\xbf\x8d\x61\x9e\xbe\x19\xf0\x22\x80\x7d\x29\x99\x5f\x13\x24\xaa\xac\x3e\x4a\x11\xbc\x03\x00\x00\xff\xff\x2b\x2d\x1c\x92\xf9\x00\x00\x00")

func sql20161012_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20161012_initSql,
		"sql/20161012_init.sql",
	)
}

func sql20161012_initSql() (*asset, error) {
	bytes, err := sql20161012_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20161012_init.sql", size: 249, mode: os.FileMode(436), modTime: time.Unix(1476321115, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sql20180619_1_unique_insertSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\x55\xd0\xce\xcd\x4c\x2f\x4a\x2c\x49\x55\x08\x2d\xe0\x72\xf4\x09\x71\x0d\x52\x08\x71\x74\xf2\x71\x55\x48\x4c\x4e\xce\x2f\xcd\x2b\x29\x56\x70\x74\x71\x51\x70\xf6\xf7\x09\xf5\xf5\x53\xc8\x2c\x8e\x2f\x4a\x4d\xcf\x2c\x2e\x29\x4a\x2c\xc9\xcc\xcf\x53\x70\xf2\xf7\xf7\x71\x75\xf4\xd3\xe1\xe2\xe4\x54\x00\x01\x88\x52\xbf\xe0\x90\x20\x47\x4f\xbf\x10\x85\xd2\xbc\xcc\xc2\xd2\x54\x54\x2d\x10\x31\x05\x8d\x82\xa2\xfc\xb4\xcc\x9c\xd4\xf8\xcc\x14\x1d\x74\x63\x35\xad\xb9\xb8\x90\x1d\xe6\x92\x5f\x9e\x87\xdd\x69\x2e\x41\xfe\x01\x30\xb7\x21\x9b\x00\x77\x10\x54\x01\x3e\x17\x59\x73\x01\x02\x00\x00\xff\xff\xc6\x76\x5d\xcd\x05\x01\x00\x00")

func sql20180619_1_unique_insertSqlBytes() ([]byte, error) {
	return bindataRead(
		_sql20180619_1_unique_insertSql,
		"sql/20180619_1_unique_insert.sql",
	)
}

func sql20180619_1_unique_insertSql() (*asset, error) {
	bytes, err := sql20180619_1_unique_insertSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/20180619_1_unique_insert.sql", size: 261, mode: os.FileMode(436), modTime: time.Unix(1529462975, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/20161012_init.sql": sql20161012_initSql,
	"sql/20180619_1_unique_insert.sql": sql20180619_1_unique_insertSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"20161012_init.sql": &bintree{sql20161012_initSql, map[string]*bintree{}},
		"20180619_1_unique_insert.sql": &bintree{sql20180619_1_unique_insertSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

